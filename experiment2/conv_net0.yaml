!obj:pylearn2.train.Train {
    dataset: &train !obj:contest_dataset.ContestDataset {
        which_set: 'train',
        start: 0,
        stop: 3456,
        fit_preprocessor: True,
        fit_test_preprocessor: True,
        preprocessor: !obj:pylearn2.datasets.preprocessing.Standardize { }        
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 64,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 1
        },
        layers: [ !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h2',
                     output_channels: 64,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [4, 4],
                     pool_stride: [3, 3],
                     max_kernel_norm: 1.9365,
                     border_mode: 'full'
                 }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h3',
                     output_channels: 64,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [4, 4],
                     pool_stride: [3, 3],
                     max_kernel_norm: 1.9365,
                     border_mode: 'full'
                 }, !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 7,
                     istdev: .05
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 64,
        learning_rate: 1.000000e-04,
        monitoring_dataset:
            {
                 'train' : *train,
                 'valid' : !obj:contest_dataset.ContestDataset {
                               which_set: 'train',
                               start: 3456,
                               stop: 4160,
                               preprocessor : !obj:pylearn2.datasets.preprocessing.Standardize { },
                               fit_preprocessor: True
                           }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
            }, !obj:pylearn2.models.mlp.WeightDecay {
                coeffs: [ .00005, .00005, .00005 ]
            }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 10
        }
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "experiment1/conv_net0_best.pkl"
        }
    ],
    save_path: "experiment1/conv_net0.pkl",
    save_freq: 1
}
